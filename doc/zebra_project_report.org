#+STARTUP: beamer
#+LATEX_CLASS: beamer

#+TITLE: 法智达云平台设计与开发
#+AUTHOR: Kechang Dong
#+EMAIL: dongkechang@foxmail.com

#+LATEX_HEADER: \usepackage[UTF8]{ctex}
#+LATEX_HEADER: \setmainfont{SimHei}
#+OPTIONS: H:2 toc:t num:t

#+BEAMER_THEME: [progressbar=frametitle]{metropolis}
#+BEAMER_INNER_THEME: {metropolis}
#+LATEX_HEADER: \usetheme[progressbar=frametitle]{metropolis}
#+LATEX_HEADER: \setbeamertemplate{frame numbering}[fraction]
#+LATEX_HEADER: \useoutertheme{metropolis}
#+LATEX_HEADER: \useinnertheme{metropolis}
#+LATEX_HEADER: \usefonttheme{metropolis}
#+LATEX_HEADER: \usecolortheme{spruce}
#+LATEX_HEADER: \setbeamercolor{background canvas}{bg=white}

#+LATEX: \metroset{block=fill}

* 云平台系统架构设计
** 系统拓扑图
#+BEGIN_SRC plantuml :cmdline -charset utf8 :file /tmp/system_arch.png
scale 5
circle "终端1" as iot1
circle "终端2" as iot2
circle "终端3" as iot3
circle "终端n" as iotn

agent "手机app" as phone

cloud "云平台" {
node "数据网关" as gateway
[业务数据接口服务] as restful
database "数据库" as postgre
[Web服务] as web
[应用服务] as app

restful <-left-> app
postgre <--> app
gateway <-up-> app
web <-right-> app
}

iot1 <.up...> gateway
iot2 <.up...> gateway
iot3 <.up...> gateway
iotn <.up...> gateway

iot1 -[hidden]right- iot2
iot2 -[hidden]right- iot3
iot3 -[hidden]right- iotn

phone <.up....> restful
#+END_SRC

#+ATTR_LATEX: :width .6\linewidth
#+RESULTS:
[[file:/tmp/system_arch.png]]

** 系统架构设计
*** 技术选型原则
1. 采用成熟经过验证并广泛采用的技术路线
2. 通讯必须安全可靠
3. 数据存储安全,备份
4. 扩展性强,括容性强
5. 开发和运行效率高
6. 灵活性,可以应对一定程度的业务变化
** 系统架构设计
*** 技术选型路线
1. 采用微服务架构
2. 采用数据总线(mqtt, zeromq总线)
3. 后端语言采用golang,兼顾开发和运行效率
4. web采用前后端完全分离
5. 数据持久化采用postgresql和redis
6. 数据采集通讯采用mqtt标准协议
** 系统组成
#+BEGIN_SRC plantuml :cmdline -charset utf8 :file /tmp/system_compoent.png
scale 5.0
node "NBIOT终端" as iot1
node "手机app" as phone
node "数据网关" as gateway
database "数据库" as postgre
node "服务" {
[业务数据接口服务] as restful
[Web服务] as web
[应用服务] as app
}

#+END_SRC

#+results:
[[file:/tmp/system_compoent.png]]

** 通讯层
*** 通讯技术方案设计
1. 基于阿里云CDN实现静态数据加速；
2. 基于阿里云SLB，实现服务器负载均衡；
3. 基于TCP/mqtt/HTTPS 三种通信方式，实现前后端数据通信。
** 服务层
*** 服务设计
1. 消息总线服务, 用于异步通讯,将消息发送端和接收端解耦合
2. 终端与收据接收服务之间采用mqtt协议,安全可靠
3. 微服务之间采用zeromq通讯,序列化采用protobuf
4. 传感器数据接收服务支持集群,可根据终端数量灵活扩容
5. 微服务结构,可根据业务需要灵活添加新服务
** 展现层
*** Web前端
1. 基于HTML/HTML5/Vue/sass,vuetify开发web前端页面
2. 兼容主流浏览器
3. 页面逻辑完全由javascript编写
4. 展现层和数据层完全分离
5. 后端只提供数据接口,前后端真正分离,分别独立开发
6. 通过跨域实现前后端数据通信。
*** 数据后端
1. 采用restful数据接口,数据采用通用的json格式
2. 提供app接入认证接口,采用令牌机制
3. 采用https协议,提供端到段的加密连接
** 数据层
*** 数据存储设计
1. redis：存储非结构化、关联性弱的业务数据。如，控制器下发的指令数据，监测设备收集的传感器数据，
2. postgresql：存储事务性数据，以及关联性将强的数据。如项目, 传感器, 角色；
** 数据网关
*** 技术特性
1. 采用消息总线方式,数据发送端与数据接收端解耦合
2. 采用mqtt协议,物联网工业标准
3. 支持安全加密传输(SSL/TLS,数字证书),用户名密码认证
4. 数据编解码采用protobuf,压缩效率高,自动生成编解码接口文件
5. 灵活扩容,支持集群
** 与NBIOT终端通讯
#+BEGIN_SRC plantuml :cmdline -charset utf8 :file iniot_network_sequence.png
skinparam sequenceArrowThickness 2
skinparam roundcorner 20
skinparam maxmessagesize 60
skinparam sequenceParticipant underline
scale 5.0
actor "NBIOT终端模块" as user
participant "DNS服务器" as dns1
participant "配置服务器" as cfg1
participant "数据网关" as app1

'请求配置服务器域名,获取配置服务器IP
user -> dns1 : 请求配置服务器域名
activate dns1
dns1 -> user : 配置服务器DNS解析成功
deactivate dns1

user -> cfg1 : 连接配置服务器
activate cfg1
user -> cfg1 : 请求配置
cfg1 -> user : 下发传感器配置信息
deactivate cfg1

'请求数据网关服务器域名,获取配置服务器IP
user -> dns1 : 请求数据网关域名
activate dns1
dns1 -> user : 网关DNS解析成功
deactivate dns1

user -> app1 : 连接数据网关
activate app1

user -> app1 : 发送传感器数据
app1 -> user : 确认传感器数据
deactivate app1

#+END_SRC

#+ATTR_LATEX: :width .6\linewidth
#+results:
[[file:iniot_network_sequence.png]]

** 数据库
*** 技术特性
1. 数据库选用postgresql,免费开源项目, 应用广泛 
2. 支持加密连接,ACL安全控制
3. 支持多种数据类型, 用户可以自定义扩展
4. 用户基数与mysql旗鼓相当
5. Mysql做为备选方案
** web服务器
*** 技术特性
1. web服务器采用nginx,处理用户的ssl加密请求
2. nginx性能高,安全性好,配置灵活.可以用作反向代理
3. web数据接口则代理本地数据接口服务
4. 后期考虑有golang内置的网络库代替nginx
5. 后期将页面内嵌入到可执行程序,部署方便
** 业务数据服务
*** 技术特性
1. 采用golang语言开发
2. golang是google公司推出的新一代网络编程语言
3. 上手快,开发效率高,程序员友好
4. 微服务之间采用zeromq通讯
* 开发计划
** 总体计划

| 阶段     | 工作内容内容 |   起始时间 |   结束时间 |
|----------+--------------+------------+------------|
| 第一阶段 | 技术调研     | 2020-06-01 | 2020-07-15 |
| 第二阶段 | 整体设计     | 2020-07-16 | 2020-08-31 |
| 第三阶段 | 前端框架预选 | 2020-09-01 | 2020-09-30 |
| 第四阶段 | 后端数据开发 | 2020-10-01 | 2020-11-30 |
| 第五阶段 | 整体调试     | 2020-12-01 | 2021-01-31 |
** 第一阶段 (6.01-7.15)
*** 技术调研,确定采用的技术栈
1. 总体调研,了解NBIOT技术细节以及应用场景
2. 了解NBIOT传感器与平台之间的交互过程
3. 后端考虑选用java或者golang
4. 比较java和golang的优缺点
5. 调研开发选用的语言和框架
6. 确定后端选用golang语言,开发框架使用gobuffalo
7. 前端采用w2ui vuejs, bootstrap, webpack sass等技术栈
** 第二阶段 (7.16-8.31)
*** 平台整体设计与框架搭建
1. 设计传感器接收数据功能为一个独立进程
2. 确定前后端分离的程度,采用第三种开发方案(完全分离)
3. 研究微服务的设计和搭建
4. 确定数据库选型(mysql和postgresql二选一)
5. 熟悉前后端分离的概念和使用方法
6. 通过zeromq技术将数据发送给平台数据处理模块
7. 熟悉mqtt服务器mosquitto的使用和配置
** 第二阶段 (7.16-8.31)
*** 平台前端框架选型开发
1. 使用前端技术栈w2ui,vue进行登陆页面编写
2. 使用gobuffalo框架结合vue进行登陆页面逻辑编写
3. 熟悉将w2ui与vue结合,集成到gobuffalo框架中
4. 采用vuetify前端框架,减少手动编写css,提高开发效率
** 第三阶段 (9.01-9.30)
*** 前端页面与数据接口联调
1. 编写用户验证模块(前端+后端)
2. 编写添加用户模块,设置密码模块
3. 用户修改密码模块
4. 用户登陆验证模块
5. 编写传感器管理模块(前端+后端)
6. 传感器添加
7. 传感器删除
8. 传感器数据查询展示
** 第三阶段 (9.01-9.30)
*** 前端页面与数据接口联调
1. 编写工程管理模块(前端+后端)
2. 工程添加
3. 工程删除
4. 编写工程管理模块(前端+后端)
5. 工程更新
6. 传感器关联
** 第四阶段 (10.01-11.30)
*** 数据网关通讯协议制定与模块开发
2. 研究mqtt协议交互过程
3. 制定NBIOT终端与数据网关交换的信息内容
5. 指导小段在模块段使用mqtt收发数据
6. 指导小段使用nanoproto进行数据编解码
*** 传感器与数据接口联调
1. 传感器DNS解析调试
2. 终端进行mqtt收发数据调试
3. 终端进行数据编码,发送, 上层数据接收服务接收数据,解码,处理
4. 上层应用编码消息, 发送数据, 终端接收数据,解码,并执行
** 第四阶段 (10.01-11.30)
*** 数据库表设计与数据接口开发
1. 后端数据库选型和库表设计
2. 设计传感器数据表结构
3. 设计用户管理表结构
4. 设计工程管理表结构
5. 研究gobuffalo框架数据结构到数据库表映射关系
6. 进行数据库操作接口封装
** 第五阶段 (12.01-1.31)
*** 系统整体联合调试
1. Web前端与后端数据接口调试
2. 终端上传数据与数据接口服务联合调试
3. app与数据接口服务之间联合调试
4. 页面下发控制命令与终端之间联合调试
5. 用户管理接口调试
6. 传感器管理接口调试
7. 工程管理接口调试
8. 上线试运行
** 第五阶段 (12.01-1.31)
*** 整理和归档设计与开发资料
1. 源代码整理归档
2. 设计和开发文档整理和归档
3. 编写系统部署文档
* 总结与成果
** 总结与成果
*** 总结
1. 基本按照计划实现了预期目标
2. 在前端选型过程中走了一些弯路,前端由w2ui修改为vue
3. 此阶段实现基本功能
4. 需要在此基础上进一步进行迭代完善
*** 成果
1. web采用前后端完全分离,前端和后端单独开发路线可行
2. 前端页面基本功能已经具备
3. 数据网关服务已经搭建,并使用mqtt测试收发数据正常
4. NBIOT终端按照预期的设想基本实现数据收发

** 结束
:PROPERTIES:
:BEAMER_ENV: fullframe
:BEAMER_OPT: standout 
:END:
谢谢大家
